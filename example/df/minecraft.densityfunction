module df {
    // Templates for vanilla density function types

    template simple_0(type) { { "type": type } }
    template simple_1(type, arg) { { "type": type, "argument": arg } }
    template simple_2(type, arg1, arg2) { { "type": type, "argument1": arg1, "argument2": arg2 } }

    template add(arg1, arg2) { validate::df_or_number(arg1); validate::df_or_number(arg2); simple_2("minecraft:add", arg1, arg2) }
    template min(arg1, arg2) { validate::df_or_number(arg1); validate::df_or_number(arg2); simple_2("minecraft:min", arg1, arg2) }
    template max(arg1, arg2) { validate::df_or_number(arg1); validate::df_or_number(arg2); simple_2("minecraft:max", arg1, arg2) }
    template mul(arg1, arg2) { validate::df_or_number(arg1); validate::df_or_number(arg2); simple_2("minecraft:mul", arg1, arg2) }

    template blend_alpha() { simple_0("minecraft:blend_alpha") }
    template blend_offset() { simple_0("minecraft:blend_offset") }
    template blend_density(arg) { simple_1("minecraft:blend_density", arg) }

    template beardifier() { simple_0("minecraft:beardifier") }

    template old_blended_noise(scale_xz: float, scale_y: float, factor_xz: float, factor_y: float, smear_scale_multiplier: float) {
        validate::noise_scale_or_factor(scale_xz); validate::noise_scale_or_factor(scale_y);
        validate::noise_scale_or_factor(factor_xz); validate::noise_scale_or_factor(factor_y);
        validate::smear_scale_multiplier(smear_scale_multiplier);

        {
            "type": "minecraft:old_blended_noise",
            "xz_scale": scale_xz, "y_scale": scale_y,
            "xz_factor": factor_xz, "y_factor": factor_y,
            "smear_scale_multiplier": smear_scale_multiplier
        }
    }

    template clamp(arg, min: float, max: float) {
        validate::number(min); validate::number(max);
        { "type": "minecraft:clamp", "input": arg, "min": min, "max": max }
    }

    template constant(value: float) { validate::number(value); simple_1("minecraft:constant", value) }

    template end_islands() { simple_0("minecraft:end_islands") }

    template noise(noise, scale_xz, scale_y) { { "type": "minecraft:noise", "noise": noise, "xz_scale": scale_xz, "y_scale": scale_y } }

    template range_choice(arg, min_inclusive: float, max_exclusive: float, when_in_range, when_out_of_range) {
        validate::number(min_inclusive); validate::number(max_exclusive);

        {
            "type": "minecraft:range_choice", "input": arg,
            "min_inclusive": min_inclusive, "max_exclusive": max_exclusive,
            "when_in_range": when_in_range, "when_out_of_range": when_out_of_range
        }
    }

    template shift(arg) { simple_1("minecraft:shift", arg) }
    template shift_a(arg) { simple_1("minecraft:shift_a", arg) }
    template shift_b(arg) { simple_1("minecraft:shift_b", arg) }

    template shifted_noise(noise, shift_x, shift_y, shift_z, scale_xz, scale_y) {
        {
            "type": "minecraft:shifted_noise",
            "noise": noise,
            "shift_x": shift_x, "shift_y": shift_y, "shift_z": shift_z,
            "xz_scale": scale_xz, "y_scale": scale_y
        }
    }

    template abs(arg) { simple_1("minecraft:abs", arg) }
    template square(arg) { simple_1("minecraft:square", arg) }
    template cube(arg) { simple_1("minecraft:cube", arg) }
    template half_negative(arg) { simple_1("minecraft:half_negative", arg) }
    template quarter_negative(arg) { simple_1("minecraft:quarter_negative", arg) }
    template squeeze(arg) { simple_1("minecraft:squeeze", arg) }

    template weird_scaled_sampler(input, noise, rarity_value_mapper) { {
        "type": "minecraft:weird_scaled_sampler", "input": input,
        "noise": noise, "rarity_value_mapper": rarity_value_mapper
    } }

    template interpolated(arg) { simple_1("minecraft:interpolated", arg) }
    template flat_cache(arg) { simple_1("minecraft:flat_cache", arg) }
    template cache_2d(arg) { simple_1("minecraft:cache_2d", arg) }
    template cache_once(arg) { simple_1("minecraft:cache_once", arg) }
    template cache_all_in_cell(arg) { simple_1("minecraft:cache_all_in_cell", arg) }

    template y_clamped_gradient(from_y: int, to_y: int, from_value: float, to_value: float) {
        validate::y(from_y); validate::y(to_y); validate::number(from_value); validate::number(to_value);

        {
            "type": "minecraft:y_clamped_gradient",
            "from_y": from_y, "to_y": to_y,
            "from_value": from_value, "to_value": to_value
        }
    }

    template df_spline(spline) {
        { "type": "minecraft:spline", "spline": spline }
    }

    template spline(coordinate, points) {
        { "coordinate": coordinate, "points": points }
    }

    template spline_point(location, value, derivative) {
        { "derivative": derivative, "location": location, "value": value }
    }

    template spline_point(location, value) {
        spline_point(location, value, 0.0)
    }

    // Member templates
    template add(this, other) { add(this, other) }

    template abs(this) { abs(this) }
    template square(this) { square(this) }
    template cube(this) { cube(this) }
    template half_negative(this) { half_negative(this) }
    template quarter_negative(this) { quarter_negative(this) }
    template squeeze(this) { squeeze(this) }

    template interpolated(this) { interpolated(this) }
    template flat_cache(this) { flat_cache(this) }
    template cache_2d(this) { cache_2d(this) }
    template cache_once(this) { cache_once(this) }
    template cache_all_in_cell(this) { cache_all_in_cell(this) }

    // + and * operators
    template +(left, right) { add(left, right) }
    template *(left, right) { mul(left, right) }

    // Other templates

    template lerp(delta, start, end) {
        if (start.type == builtin::type::int || start.type == builtin::type::float) {
            impl::lerp_const_start(delta, start as builtin::type::float, end) // Vanilla optimization
        } else {
            start * (cache_once(delta) * -1.0 + 1.0)
                + end * cache_once(delta)
        }
    }

    template apply_blending(input, blend_offset) {
        flat_cache(cache_2d(lerp(blend_alpha(), blend_offset, input)))
    }

    template apply_blend_density(input) {
        (0.64 * interpolated(blend_density(input))).squeeze()
    }

    template apply_slides(input, min_y: int, max_y: int,
        top_relative_min_y: int, top_relative_max_y: int, top_density: float,
        bottom_relative_min_y: int, bottom_relative_max_y: int, bottom_density: float) {
        lerp(
            y_clamped_gradient(builtin::static(min_y + bottom_relative_min_y), builtin::static(min_y + bottom_relative_max_y), 0.0, 1.0),
            bottom_density,
            lerp(
                y_clamped_gradient(builtin::static(min_y + max_y - top_relative_min_y), builtin::static(min_y + max_y - top_relative_max_y), 1.0, 0.0),
                top_density,
                input
            )
        )
    }

    template apply_surface_slides(input) {
        apply_slides(input, -64, 384, 80, 64, -0.078125, 0, 24, 0.1171875)
    }

    module validate {
        // Templates for validation

        template number(input: float) {
            if (input < -1000000.0 || input > 1000000.0) {
                builtin::error("Validation failed: Number out of bounds", input);
                false
            } else true
        }

        template df_or_number(input) {
            if (input.type == builtin::type::int || input.type == builtin::type::float) {
                if (input as builtin::type::float < -1000000.0 || input as builtin::type::float > 1000000.0) {
                    builtin::error("Validation failed: Number out of range", input);
                    false
                } else true
            } else if (input.type != builtin::type::object && input.type != builtin::type::string) {
                builtin::error("Validation failed: Input is neither a number nor an object", input);
                false
            } else true
        }

        template y(input: int) {
            if (input < -4064 || input > 4062) {
                builtin::error("Validation failed: Number out of bounds", input);
                false
            } else true
        }

        template noise_scale_or_factor(input: float) {
            if (input < 0.001 || input > 1000.0) {
                builtin::error("Validation failed: Number out of bounds", input);
                false
            } else true
        }

        template smear_scale_multiplier(input: float) {
            if (input < 1.0 || input > 8.0) {
                builtin::error("Validation failed: Number out of bounds", input);
                false
            } else true
        }
    }

    module impl {
        template lerp_const_start(delta, start: float, end) { // Requires start to be a constant number
            if (start == 0.0) {
                delta * end
            } else {
                start + delta * (builtin::static(-start) + end)
            }
        }
    }
}
