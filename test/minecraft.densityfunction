module df {
    // Templates for vanilla density function types

    template simple_0(type) = { "type": type };
    template simple_1(type, arg) = { "type": type, "argument": arg };
    template simple_2(type, arg1, arg2) = { "type": type, "argument1": arg1, "argument2": arg2 };

    template add(arg1, arg2) = simple_2("minecraft:add", arg1, arg2);
    template min(arg1, arg2) = simple_2("minecraft:min", arg1, arg2);
    template max(arg1, arg2) = simple_2("minecraft:max", arg1, arg2);
    template mul(arg1, arg2) = simple_2("minecraft:mul", arg1, arg2);

    template blend_alpha() = simple_0("minecraft:blend_alpha");
    template blend_offset() = simple_0("minecraft:blend_offset");
    template blend_density(arg) = simple_1("minecraft:blend_density", arg);

    template beardifier() = simple_0("minecraft:beardifier");

    template old_blended_noise(scale_xz, scale_y, factor_xz, factor_y, smear_scale_multiplier) = {
        "type": "minecraft:old_blended_noise",
        "xz_scale": scale_xz, "y_scale": scale_y,
        "xz_factor": factor_xz, "y_factor": factor_y,
        "smear_scale_multiplier": smear_scale_multiplier
    };

    template clamp(arg, min, max) = { "type": "minecraft:clamp", "input": arg, "min": min, "max": max };

    template constant(value) = simple_0("minecraft:constant", value);

    template end_islands() = simple_0("minecraft:end_islands");

    template noise(noise, scale_xz, scale_y) = { "type": "minecraft:noise", "noise": noise, "xz_scale": scale_xz, "y_scale": scale_y };

    template range_choice(arg, min_inclusive, max_inclusive, when_in_range, when_out_of_range) = {
        "type": "minecraft:range_choice", "input": arg,
        "min_inclusive": min_inclusive, "max_inclusive": max_inclusive,
        "when_in_range": when_in_range, "when_out_of_range": when_out_of_range
    };

    template shift(arg) = simple_1("minecraft:shift", arg);
    template shift_a(arg) = simple_1("minecraft:shift_a", arg);
    template shift_b(arg) = simple_1("minecraft:shift_b", arg);

    template shifted_noise(shift_x, shift_y, shift_z, scale_xz, scale_y, noise) = {
        "type": "minecraft:shifted_noise",
        "shift_x": shift_x, "shift_y": shift_y, "shift_z": shift_z,
        "xz_scale": scale_xz, "y_scale": scale_y,
        "noise": noise
    };

    template abs(arg) = simple_1("minecraft:abs", arg);
    template square(arg) = simple_1("minecraft:square", arg);
    template cube(arg) = simple_1("minecraft:cube", arg);
    template half_negative(arg) = simple_1("minecraft:half_negative", arg);
    template quarter_negative(arg) = simple_1("minecraft:quarter_negative", arg);
    template squeeze(arg) = simple_1("minecraft:squeeze", arg);

    template weird_scaled_sampler(arg, noise, rarity_value_mapper) = {
        "type": "minecraft:weird_scaled_sampler",
        "noise": noise, "rarity_value_mapper": rarity_value_mapper
    };

    template interpolated(arg) = simple_1("minecraft:interpolated", arg);
    template flat_cache(arg) = simple_1("minecraft:flat_cache", arg);
    template cache_2d(arg) = simple_1("minecraft:cache_2d", arg);
    template cache_once(arg) = simple_1("minecraft:cache_once", arg);
    template cache_all_in_cell(arg) = simple_1("minecraft:cache_all_in_cell", arg);

    template y_clamped_gradient(from_y, to_y, from_value, to_value) = {
        "type": "minecraft:y_clamped_gradient",
        "from_y": from_y, "to_y": to_y,
        "from_value": from_value, "to_value": to_value
    };

    // TODO template spline(...) = ...

    // Member templates
    template add(this, other) = add(this, other);

    template abs(this) = abs(this);
    template square(this) = square(this);
    template cube(this) = cube(this);
    template half_negative(this) = half_negative(this);
    template quarter_negative(this) = quarter_negative(this);
    template squeeze(this) = squeeze(this);
    
    template interpolated(this) = interpolated(this);
    template flat_cache(this) = flat_cache(this);
    template cache_2d(this) = cache_2d(this);
    template cache_once(this) = cache_once(this);
    template cache_all_in_cell(this) = cache_all_in_cell(this);

    // + and * operators
    template +(left, right) = add(left, right);
    template *(left, right) = mul(left, right);
};
